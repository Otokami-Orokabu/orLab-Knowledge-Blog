---
title: "ClineにGithub CLIを接続するためのプロンプト"
date: 2025-05-3
tags: ["ai", "prompt"]
---

##
一例となりますが似たようなプロンプトで確認しました.

### 確認環境
VSCode + Cline + Claude 3.7

## プロンプト

```yaml

task: GitHub CLIのインストールと操作テスト（macOS M3）

environment:
  os: macOS
  architecture: arm64 (Apple M3)
  shell: auto_detect
  homebrew_installed: unknown
  github_authenticated: false

goal:
  - `gh` コマンドをインストールし、正常動作を確認する
  - GitHub CLIからの基本操作（認証・リポジトリ作成・クローン）を通じて環境整備を行う

constraints:
  - Homebrewが未導入であれば導入を含む
  - CLI完結（GUI操作なし）
  - `gh auth login` によるGitHubアカウント認証を行う
  - GitHub上にテスト用リポジトリを作成してクローン可能かを検証する

steps:
  - Homebrewの存在確認とインストール（Apple Silicon対応）
  - GitHub CLI (`gh`) のインストールとPATH設定
  - GitHub CLIのバージョン確認
  - `gh auth login` による認証
  - テスト用リポジトリ `gh-cli-test` の作成（privateでも可）
  - ローカルにクローンし、`git remote -v` で接続確認

output_format:
  type: shell_script
  format: |
    # Homebrewチェックと導入（前述）

    if ! command -v brew &> /dev/null; then
      echo "Homebrewが見つかりません。インストールします..."

      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

      if [ -n "$ZSH_VERSION" ]; then
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
        eval "$(/opt/homebrew/bin/brew shellenv)"
      fi

      if [ -n "$BASH_VERSION" ]; then
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.bash_profile
        eval "$(/opt/homebrew/bin/brew shellenv)"
      fi
    fi

    brew install gh

    echo "✅ GitHub CLI インストール完了: $(gh --version)"

    # GitHub認証（必要に応じて --web モードで）
    echo "🔐 GitHubへログインします"
    gh auth login

    # テスト用のリポジトリを作成
    echo "📁 テスト用のリポジトリを作成中..."
    gh repo create gh-cli-test --public --confirm

    # クローンして接続確認
    echo "📥 クローンします..."
    git clone https://github.com/$(gh api user | jq -r .login)/gh-cli-test.git
    cd gh-cli-test
    echo "🔗 接続確認:"
    git remote -v

notes:
  - `gh auth login` は一度行えば認証が保持されます（トークン保存）
  - `jq` がない場合、`gh api user -q .login` でも代用可
  - リポジトリ作成・クローン後に不要であれば削除して構いません（`gh repo delete`）
```